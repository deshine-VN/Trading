//@version=5
indicator("ICT Killzones + Liquidity Lines (buffer-safe)", overlay=true, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

// ===== Inputs =====
showAsian  = input.bool(true, "Show Asian Killzone")
showLondon = input.bool(true, "Show London Killzone")
showNY     = input.bool(true, "Show New York Killzone")
asianColor  = input.color(color.new(color.teal, 85), "Asian Color")
londonColor = input.color(color.new(color.blue, 85), "London Color")
nyColor     = input.color(color.new(color.orange, 85), "New York Color")
untakenColor = input.color(color.new(color.lime, 0), "Untaken Line Color")
takenColor   = input.color(color.new(color.red, 0), "Taken Line Color")
textColor    = input.color(color.black, "Label Text Color")
labelOffset  = input.int(5, "Label Offset (ticks)", minval=-50, maxval=50)

// ===== Killzone Times (UTC) =====
asianStartH  = input.int(18)
asianStartM  = input.int(0)
asianEndH    = input.int(0)
asianEndM    = input.int(0)
londonStartH = input.int(2)
londonStartM = input.int(0)
londonEndH   = input.int(5)
londonEndM   = input.int(0)
nyStartH     = input.int(7)
nyStartM     = input.int(0)
nyEndH       = input.int(10)
nyEndM       = input.int(0)

// ===== Helper functions =====
utcMins() => hour(time, "UTC") * 60 + minute(time, "UTC")
inSession(startH, startM, endH, endM) =>
    s = startH * 60 + startM
    e = endH * 60 + endM
    now = utcMins()
    s <= e ? (now >= s and now < e) : (now >= s or now < e)

getDayName(t) =>
    switch dayofweek(t)
        dayofweek.monday => "Mon"
        dayofweek.tuesday => "Tue"
        dayofweek.wednesday => "Wed"
        dayofweek.thursday => "Thu"
        dayofweek.friday => "Fri"
        => "Weekend"

// --- Day State ---
var string prevDay = na
var float dayHigh = na
var float dayLow = na
var int highBar = na
var int lowBar = na
var line[] highLines = array.new_line()
var line[] lowLines  = array.new_line()
var bool[] highBroken = array.new_bool()
var bool[] lowBroken  = array.new_bool()
var label[] highLabels = array.new_label()
var label[] lowLabels  = array.new_label()

currDay = getDayName(time)
isNewDay = currDay != prevDay

if na(prevDay)
    prevDay := currDay
    dayHigh := high
    dayLow := low
    highBar := bar_index
    lowBar := bar_index

createDayObjects(_day, _highBar, _high, _lowBar, _low) =>
    safeX2 = math.min(bar_index, last_bar_index)
    lH = line.new(_highBar, _high, safeX2, _high, xloc=xloc.bar_index, color=untakenColor, width=1)
    lL = line.new(_lowBar, _low, safeX2, _low, xloc=xloc.bar_index, color=untakenColor, width=1)
    midH = math.floor((_highBar + safeX2) / 2)
    midL = math.floor((_lowBar + safeX2) / 2)
    labH = label.new(midH, _high + labelOffset * syminfo.mintick, str.format("{0}-H", _day),
         xloc=xloc.bar_index, style=label.style_label_center, textcolor=textColor, color=color.new(color.white, 100), size=size.small)
    labL = label.new(midL, _low - labelOffset * syminfo.mintick, str.format("{0}-L", _day),
         xloc=xloc.bar_index, style=label.style_label_center, textcolor=textColor, color=color.new(color.white, 100), size=size.small)
    array.push(highLines, lH)
    array.push(lowLines, lL)
    array.push(highBroken, false)
    array.push(lowBroken, false)
    array.push(highLabels, labH)
    array.push(lowLabels, labL)

// --- On new day ---
if isNewDay
    if not na(dayHigh) and not na(dayLow)
        createDayObjects(prevDay, highBar, dayHigh, lowBar, dayLow)
    dayHigh := high
    dayLow := low
    highBar := bar_index
    lowBar := bar_index
    prevDay := currDay

if high > dayHigh
    dayHigh := high
    highBar := bar_index
if low < dayLow
    dayLow := low
    lowBar := bar_index

// --- Update lines (safe, confirmed only) ---
if barstate.isconfirmed
    for i = 0 to array.size(highLines) - 1
        l = array.get(highLines, i)
        lab = array.get(highLabels, i)
        if not array.get(highBroken, i)
            if high >= line.get_y1(l)
                line.set_color(l, takenColor)
                array.set(highBroken, i, true)
            safeX2 = math.min(bar_index, last_bar_index)
            line.set_x2(l, safeX2)
            mid = math.floor((line.get_x1(l) + safeX2) / 2)
            label.set_x(lab, mid)

    for i = 0 to array.size(lowLines) - 1
        l = array.get(lowLines, i)
        lab = array.get(lowLabels, i)
        if not array.get(lowBroken, i)
            if low <= line.get_y1(l)
                line.set_color(l, takenColor)
                array.set(lowBroken, i, true)
            safeX2 = math.min(bar_index, last_bar_index)
            line.set_x2(l, safeX2)
            mid = math.floor((line.get_x1(l) + safeX2) / 2)
            label.set_x(lab, mid)

// --- Killzones ---
var float kzHigh = na
var float kzLow  = na
var int   kzStart = na
var box   kzBox   = na

paintSession(startH, startM, endH, endM, show, col) =>
    inSess = show and inSession(startH, startM, endH, endM)
    var float sHigh = na
    var float sLow = na
    var int   sStart = na
    if inSess
        sHigh := na(sHigh) ? high : math.max(sHigh, high)
        sLow := na(sLow) ? low : math.min(sLow, low)
        sStart := na(sStart) ? bar_index : sStart
    else
        if not na(sStart)
            safeX2 = math.min(bar_index, last_bar_index)
            box.new(sStart, sHigh, safeX2, sLow, xloc=xloc.bar_index, bgcolor=col, border_color=color.new(color.black, 80))
        sHigh := na
        sLow := na
        sStart := na

paintSession(asianStartH, asianStartM, asianEndH, asianEndM, showAsian, asianColor)
paintSession(londonStartH, londonStartM, londonEndH, londonEndM, showLondon, londonColor)
paintSession(nyStartH, nyStartM, nyEndH, nyEndM, showNY, nyColor)
